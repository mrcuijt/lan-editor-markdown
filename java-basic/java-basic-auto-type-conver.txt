#### java-basic-auto-type-conver

自动类型转换（也叫隐式类型转换）

强制类型转换（也叫显示类型转换）

类型转换的原理

什么时候要用强制类型转换？

表达式的数据类型自动提升

 - 所有的 byte 型、short型 和 char 的值将被提升到 int 型。

 - 如果一个操作数是 long 型，计算结果就是 long 型；

 - 如果一个操作数是 float 型，计算结果就是 float 型；

 - 如果一个操作数是 double 型，计算结果就是 double 型；

分析
  System.out.println('a') 与 System.out.println(' a' + 1) 的区别。

案例一：

int x = 3;
byte b = 5;
x = x + b;

int 类型在内存中占 4 个字节
byte 类型在内存中占 1 个字节

在做运算符运算的时候是如何操作的呢？
答案是数值类型可以做自动类型提升，换句话说只要让两边在内存中占用的大小都一致就可以了。
问题在于到底一致性在谁？
我们把 4 个字节变为 1 个字节，是不是变的一致了？
是可以的，但是这样就会损失精度。
我们把 1 个字节变为 4 个字节，这样就可以了。

所以程序在计算是会先把不同的数值类型转换成相同的数值类型，再运算就没有问题了。

转换是以谁为主呢？
  占用内存比较大的那一方为主。这回导致什么呢？占用内存小的数据类型会做一个自动类型提升。它会从 1 个字节提升到 4 个字节。运算后得到的也是 4 个字节。

案例二：

byte b = 3;
b = b + 4; // 会抛异常

  由于在 Java 中默认的数值类型是 int 类型，所以 int 类型再和 byte 做运算时会先进行自动类型提升，从 1 个字节转换到 4 个字节。最终运算的结果也是 4 个字节，而 byte 类型是 1 个字节，所以最终的结果无法再赋值给 byte 类型变量 b ，因为从 4 个字节转换到 1 个字节会损失精度、丢失数据，所以以上操作会抛出异常。

  如果非要让 4 个字节的数据存在 1 个字节的存储空间中呢？

byte b = 3;
b = (byte)(b + 4); // 强制类型转换

  通过强制类型转换完成。程序会将四个字节中高位的直接舍弃，只取最后 1 字节的数据。



字符类型运算过程
  System.out.println('a' + 1); // 97
  
  在计算机中只识别二进制，在初期计算机语言设计时，老外就在想能不能将生活中的文件可以让计算机直接识别呢？能不能我们两者之间有一个中转呢？
  我们都知道二进制的 0 1 组合可以有很多种表述形式，老外们就将计算机 1 0 的组合对应生活中的文字。
  于是就出现了二进制与英文字母的对应关系

  01100001 --- a
  01100010 --- b
  ...      --- ...

  以此类推做二进制与字符的对应，于是乎出现了专门与之对应的一张表，也称为编码表。
  编码表，将生活中的文字与计算机中的二进制对应起来。而这张表值对应了美国人这边使用的文字和一些字符。这张表又叫做：美国信息标准交换码(ASCII)。

  而二进制在实际的数据当中还可以对应一个十进制的一个数。
  
  回到这里
  System.out.println('a' + 1); // 98

  字符型在做运算的时候，会先去编码表中查找对应的二进制数，然后做自动类型提升后与数值类型的数据做运算。

  在中国也有与之对应的一张码表其中不仅包含了英文数字，还包含了 2 万多个中文，叫做 GBK 字符集又叫做国标码。

  所有的中文在计算机中也有与之对应的二进制数值。所在不管是在做英文字符的大小比较，还是做中文汉字字符的大小比较的话，最终还是通过比较的计算机中与字符对应的二进制数的值来判断字符的大小的。

  在 Java 语言中内置了一个码表，这张码表叫做 Unicode 码表，这张码表叫做国际标准码表，软件组中将不同国家中各自的码表进行统一，合并为一张码表，就是 Unicode 码表，这张码表中能包含全世界所有的文字，但并不是真正的完全包含，因为我们知道我们国家的文字还在更新。

  在 Java 语言中字符在查找对应的二进制数值时所查找的表就是 Unicode 码表，而全世界基本上所有的码表都兼容 ASCII 码表。因为 ASCII 是最基础的码表。

经典面试题：

  byte b = 4;
  b = 3 + 7;
  System.out.println(b); // 10 编译通过，程序运行正常
 
  byte b = 4;
  byte b1 = 3;
  byte b2 = 7;
  b = b1 + b2; // 编译出错，可能会损失精度
  System.out.println(b);

  这个问题要先从 byte b = 4; 开始看起，需要先将这句代码看懂后才能够理解。

  首先要知道 4 是什么类型，4 是 int 类型。在 Java 中只要见到整数它就是 int 类型，这是 Java 中默认的。那么问题来了 int 类型是如何赋值给 byte 类型的呢？

  编译器在编译的时候，会先查看声明变量的数据类型，然后在查看赋值的大小，在这时编译器会判断这个数值是否在 byte 字节存储的数据范围之内。如果数值在 byte 字节存储的数据范围内的话他就会把这个数值做一个默认的强制类型转换，就会将 int 类型的 4 强制转换为 byte 类型后再赋值给 b 。

  编辑器会自动做数据检测，然后在不损失精度的情况下做强制类型转换。

分析

  byte b = 4;

  首先编译器会先根据变量的数据类型去判断该变量的取值范围。
  byte 类型的数据取值在 -128~127 之间。然后会将 4 转换为二进制数据。
  4 = 0000-0000 0000-0000 0000-0000 0000-0100 的二进制数据表现形式。然后会再判断二进制数 4 是否在 byte 类型的数据表示范围之内。如果在 byte 类型的表示范围内的话就会做一个强制类型转换，舍弃高位后将低位的数据赋值给 byte 数据类型的变量。否则将会在编译时抛出异常。

分析 

  byte b = 3 + 7;

  首先编译器会先做赋值号右侧的计算 3 + 7 ，将得到的值和上面一样做数据类型范围的验证，如果在右侧计算的结果在 byte 数据类型的表示范围内，Java 编译器就会对右侧的结果做强制类型转换后赋值给 byte 数据类型的变量。


分析

  byte b = 4;
  byte b1 = 3;
  byte b2 = 7;
  b = b1 + b2; // 抛出异常，会损失精度

  以上标红的代码中，b1 和 b2 是两个变量而不是数值。变量意味着 b1 和 b2 的数值会发生变化，一变化就会出事，以上变量可能会多次进行赋值，而编译器无法判断变量发生的变化，相当于编译器完全不知道以上两个数的值到底是多少，那就无法去做具体数值的验证和数据类型转换。编译器检查不了就无法做出处理就会抛出异常。

  想到的疑问？静态的变量呢？静态常量呢？常量呢？

  测试得知，局部变量、静态变量、常量 这些变量编译器都无法做默认的识别处理，程序在编译阶段就会抛出异常。而静态常量可以被编译器识别。

  